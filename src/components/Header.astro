---
import Logo from "./header-parts/Logo.astro";
import BargerButton from "./header-parts/BargerButton.astro";

interface Props {
	page: string
}

const { page } = Astro.props;
// console.log('Astro.props', Astro.props);
---

<div class="header" id=`page-${page}`>
	<Logo></Logo>
	<div class="menu" id="header-menu">
		<nav id="menu-main">
			<ul>
			  <li><a href="/#intro" class="header-menu-items">intro</a></li>
			  <li><a href="/#highlights" class="header-menu-items">highlights</a></li>
			  <li><a href="/works" class="header-menu-items">works</a></li>
			  <li><a href="/paletopia" class="header-menu-items">paletopia</a></li>
			</ul>
		</nav>
		<nav id="menu-sub">
			<ul>
			  <li><a href="/about" class="header-menu-items">about</a></li>
			</ul>
		</nav>
	</div>
	<BargerButton></BargerButton>
</div>

<script>
	// 今いるページを .header の ID から認識して、メニューを強調表示
	function activateHeaderNav() {
		const hash = window.location.hash;
		const PageNameList = [ 'index#intro', 'index#highlights', 'works', 'paletopia', 'about' ];
		const headerId = document.querySelector(".header").id;
		const name = headerId.split('-').pop();
		const index = (() => {
			let idx = PageNameList.indexOf(name);
			if (idx < 0) idx = PageNameList.indexOf(name + hash);
			return idx;
		})();
		if (index < 0) return;

		const items = document.querySelectorAll('.header-menu-items');
		items.forEach((item, i) => {
			if (index === i && !(item.classList.contains('active)'))) item.classList.add('active');
			else item.classList.remove('active');
		});
	}

	document.addEventListener("DOMContentLoaded", activateHeaderNav);

	// ヘッダーのリンクが押されたときの処理
	document.querySelector('.header').addEventListener('clickHeaderMenu', activateHeaderNav);

	// スクロールアクション
	let set_position = 0;
	window.addEventListener('scroll', function () {
		if (set_position < document.documentElement.scrollTop) {
			document.querySelector('.barger-button')
				.querySelector('#button').dispatchEvent(new CustomEvent('bargerclose'));
			document.querySelector('.header').classList.add('hide');
		} else {
			document.querySelector('.barger-button')
				.querySelector('#button').dispatchEvent(new CustomEvent('bargerclose'));
			document.querySelector('.header').classList.remove('hide');
		}
		set_position = document.documentElement.scrollTop;
	});

</script>

<style lang="scss">
	@use "@/styles/mediaquery" as mq;

	.header {
		--header-h: 50px;
		--logo-w: 105px;
		--barger-menu-bgc: var(--distinction);
	}

	.header {
		width: 100%;
		height: var(--header-h);
		z-index: 1000;
		position: relative;
		background-color: var(--distinction);
	}

	@include mq.break(mb) {
		.header {
			position: fixed;
			top: 0;
			transition: all var(--trs-duration);

			.menu {
				padding: 0 2rem;
				position: fixed;
				z-index: 10;
				top: -250px;
				background-color: var(--distinction);
				width: calc(100% - (2rem * 2)); // {BargerButton の Width} を引く
				transition: all var(--trs-duration);

				&.panelactive {
					top: var(--header-h);
					box-shadow: 0 10vh 100vh 0 rgba(0, 0, 0, .8);
				}

				nav {
					&:last-child {
						margin-top: 1rem;
					}

					ul {
						li {
							margin: 6px 0;
							a {
								text-transform: uppercase;
								font-size: 1.2rem;
								
								&.active {
									color: var(--accent);
								}
							}
						}
					}
				}
			}
		}

		.header.hide {
			top: -50px !important;
		}
	}

	// PC
	@include mq.break(pc) {
		.header {
			width: var(--margin-percentage);
			max-width: calc(var(--screen-max-width) * var(--margin-rate));
			height: var(--header-h);
			margin: 0 auto;
			color: var(--white);
			position: relative;

			.menu {
				height: 100%;
				width: calc(100% - var(--logo-w));
				position: absolute;
				left: var(--logo-w);

				nav {
					display: inline-block;
					position: absolute;

					ul {
						li {
							display: inline-block;
							margin-left: 10px;

							&:last-child {
								margin-right: 10px;
							}

							a {
								text-transform: uppercase;
								vertical-align: middle;
								line-height: 50px;
								font-size: 1.2rem;

								&:hover {
									transition: var(--trs-duration);
									color: var(--white-2);
								}
								
								&.active {
									color: var(--accent);
								}
							}
						}
					}

					&#menu-main {
						left: 0;
					}

					&#menu-sub {
						right: 0;
					}
				}
			}
		}
	}
</style>
